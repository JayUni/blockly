[
    {
        "block_name": "controls_statement_for",
        "loop_style": "controls_for",
        "variable": "i",
        "start": {
            "block_name": "math_number_number",
            "number": "1"
        },
        "end": {
            "block_name": "math_number_number",
            "number": "20"
        },
        "step": {
            "block_name": "math_number_number",
            "number": "1"
        },
        "branch": [
            {
                "block_name": "controls_statement_ifStructure",
                "structure": [
                    {
                        "block_name": "controls_statement_if",
                        "statements": "if",
                        "condition": {
                            "block_name": "math_boolean_numberProperty",
                            "functionName": "isEven",
                            "argument": [
                                {
                                    "block_name": "variables_statement_get",
                                    "functionName": "variables_get",
                                    "varName": "i"
                                }
                            ]
                        },
                        "branchCode": [
                            {
                                "block_name": "variables_statement_set",
                                "functionName": "variables_set",
                                "varName": "i",
                                "argument": [
                                    {
                                        "block_name": "math_number_function_randomInt",
                                        "functionName": "randomInt",
                                        "argument": [
                                            {
                                                "block_name": "math_number_number",
                                                "number": "1"
                                            },
                                            {
                                                "block_name": "math_number_number",
                                                "number": "20"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "block_name": "controls_statement_elseif",
                        "statements": "elseif",
                        "condition": {
                            "block_name": "logic_boolean_operator_logicNegate",
                            "operator": "negate",
                            "argument": [
                                {
                                    "block_name": "logic_boolean_operator_compare",
                                    "operator": "cmpg",
                                    "argument": [
                                        {
                                            "block_name": "variables_statement_get",
                                            "functionName": "variables_get",
                                            "varName": "i"
                                        },
                                        {
                                            "block_name": "math_number_number_constant",
                                            "number": "PI"
                                        }
                                    ]
                                }
                            ]
                        },
                        "branchCode": [
                            {
                                "block_name": "variables_statement_set",
                                "functionName": "variables_set",
                                "varName": "i",
                                "argument": [
                                    {
                                        "block_name": "math_number_operator_single",
                                        "operator": "exp",
                                        "argument": [
                                            {
                                                "block_name": "variables_statement_get",
                                                "functionName": "variables_get",
                                                "varName": "i"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "block_name": "controls_statement_elseif",
                        "statements": "elseif",
                        "condition": {
                            "block_name": "logic_boolean_operator_compare",
                            "operator": "cmpg",
                            "argument": [
                                {
                                    "block_name": "variables_statement_get",
                                    "functionName": "variables_get",
                                    "varName": "i"
                                },
                                {
                                    "block_name": "math_number_operator_single",
                                    "operator": "atan",
                                    "argument": [
                                        {
                                            "block_name": "math_number_number",
                                            "number": "60"
                                        }
                                    ]
                                }
                            ]
                        },
                        "branchCode": [
                            {
                                "block_name": "variables_statement_set",
                                "functionName": "variables_set",
                                "varName": "i",
                                "argument": [
                                    {
                                        "block_name": "math_number_function_randomFloat",
                                        "number": "randomFloat"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "block_name": "controls_statement_else",
                        "statements": "else",
                        "branchCode": [
                            {
                                "block_name": "controls_statement_continue",
                                "statements": "continue"
                            }
                        ]
                    }
                ]
            },
            {
                "block_name": "text_statement_print",
                "functionName": "text_print",
                "argument": [
                    {
                        "block_name": "text_string_trim",
                        "functionName": "text_trim",
                        "argument": [
                            {
                                "block_name": "variables_variable_variable",
                                "text": {
                                    "block_name": "variables_statement_get",
                                    "functionName": "variables_get",
                                    "varName": "i"
                                }
                            },
                            {
                                "which_side": "BOTH"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "block_name": "text_statement_print",
        "functionName": "text_print",
        "argument": [
            {
                "block_name": "math_statement_function_onList",
                "functionName": "AVERAGE",
                "argument": [
                    {}
                ]
            }
        ]
    }
]
